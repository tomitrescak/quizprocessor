(function(FuseBox){FuseBox.$fuse$=FuseBox;
var __process_env__ = {"NODE_ENV":"production"};
FuseBox.pkg("default", {}, function(___scope___){
___scope___.file("index.jsx", function(exports, require, module, __filename, __dirname){

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const ReactDOM = require("react-dom");
const state_1 = require("./client/config/state");
const context_1 = require("./client/config/context");
const mobx_react_1 = require("mobx-react");
const app_1 = require("./client/modules/main/components/app");
const fuse_hmr_1 = require("fuse-box/modules/fuse-hmr");
fuse_hmr_1.setStatefulModules((name) => name.match(/context|state/) != null);
ReactDOM.render(React.createElement(mobx_react_1.Provider, { state: state_1.state, context: context_1.context },
    React.createElement(app_1.App, null)), document.querySelector('#app'));
//# sourceMappingURL=index.js.map
});
___scope___.file("client/config/state.js", function(exports, require, module, __filename, __dirname){
/* fuse:injection: */ var process = require("process");
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
var _a;
"use strict";
const mobx_1 = require("mobx");
class FileState {
    constructor() {
        this.name = '';
        this.content = '';
        this.loaded = false;
    }
}
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Object)
], FileState.prototype, "name", void 0);
exports.FileState = FileState;
function round(num) {
    return Math.round(num * 100) / 100;
}
class SavedResult extends FileState {
    constructor() {
        super(...arguments);
        this.results = mobx_1.observable([]);
    }
    process(result) {
        let studentRecord = this.students.find(s => s.id === result.id);
        let lastName = studentRecord ? studentRecord.lastName : 'NOT';
        let firstName = studentRecord ? studentRecord.firstName : 'NOT';
        let score = 0;
        let scores = [];
        for (let i = 0; i < result.answers.length; i++) {
            let userAnswer = result.answers[i].map(u => u.trim());
            let correctAnswer = this.correctAnswers[i];
            if (correctAnswer.length === 1) {
                const currentScore = correctAnswer[0] === userAnswer[0] ? 1 : 0;
                score += currentScore;
                scores.push(currentScore);
            }
            else if (correctAnswer.length > 1 && userAnswer.length == 1) {
                const currentScore = correctAnswer.indexOf(userAnswer[0]) >= 0 ? 0.75 : 0;
                score += currentScore;
                scores.push(currentScore);
            }
            else {
                let correct = correctAnswer.reduce((previous, next) => (userAnswer.indexOf(next) >= 0 ? 1 : 0) + previous, 0);
                let incorrect = userAnswer.reduce((previous, next) => (correctAnswer.indexOf(next) == -1 ? 1 : 0) + previous, 0);
                correct -= incorrect;
                if (correct < 0) {
                    correct = 0;
                }
                const currentScore = round(correct / correctAnswer.length);
                score += currentScore;
                scores.push(currentScore);
            }
        }
        return {
            id: result.id,
            lastName,
            firstName,
            score: round(score),
            scores,
            answers: result.answers
        };
    }
    load(name, content) {
        let lines = content.split('\n');
        let phase = 'students';
        let group = 0;
        this.students = [];
        this.results.clear();
        for (let line of lines) {
            if (!line.trim()) {
                continue;
            }
            const split = line.split(',');
            if (!split[0]) {
                phase = 'groups';
                this.correctAnswers = split.slice(1).map(s => s.split('|').map(d => d.trim()));
                group++;
                this.results.push({
                    id: '--',
                    lastName: 'CORRECT',
                    firstName: 'ANSWERS',
                    score: this.correctAnswers.length,
                    scores: this.correctAnswers.map(a => 1),
                    answers: this.correctAnswers
                });
                continue;
            }
            if (phase === 'students') {
                this.students.push({ lastName: split[1].trim(), firstName: split[2].trim(), id: split[0].trim(), group });
            }
            if (phase === 'groups') {
                const parts = line.split(',');
                const id = parts.slice(parts.length - 8);
                const answers = parts.slice(1, parts.indexOf(''));
                this.results.push(this.process({
                    id: id.join('').trim(),
                    answers: answers.map(a => a.split('|'))
                }));
            }
        }
        let answers = this.correctAnswers.length;
        let half = this.correctAnswers.length / 2;
        let interval = half / 4;
        exports.state.fail = Math.round(this.results.filter(r => r.score < answers / 2).length / (this.results.length - 2) * 100);
        exports.state.pass =
            Math.round(this.results.filter(r => r.score >= half && r.score < half + interval).length / (this.results.length - 2) * 100);
        exports.state.credit =
            Math.round(this.results.filter(r => r.score >= half + interval && r.score < half + 2 * interval).length /
                (this.results.length - 2) * 100);
        exports.state.distinction =
            Math.round(this.results.filter(r => r.score >= half + 2 * interval && r.score < half + 3 * interval).length /
                (this.results.length - 2) * 100);
        exports.state.hd =
            Math.round(this.results.filter(r => r.score >= half + 3 * interval && r.score < half + 4 * interval).length /
                (this.results.length - 2) * 100);
        this.name = `Loaded ${this.results.length} results`;
    }
}
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", typeof (_a = typeof mobx_1.IObservableArray !== "undefined" && mobx_1.IObservableArray) === "function" && _a || Object)
], SavedResult.prototype, "results", void 0);
tslib_1.__decorate([
    mobx_1.action,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], SavedResult.prototype, "process", null);
tslib_1.__decorate([
    mobx_1.action,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", void 0)
], SavedResult.prototype, "load", null);
exports.SavedResult = SavedResult;
class StateModel {
    constructor() {
        this.text = '';
        this.savedResults = new SavedResult();
        this.fail = 0;
        this.pass = 0;
        this.credit = 0;
        this.distinction = 0;
        this.hd = 0;
    }
}
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Object)
], StateModel.prototype, "text", void 0);
tslib_1.__decorate([
    mobx_1.observable.shallow,
    tslib_1.__metadata("design:type", Object)
], StateModel.prototype, "savedResults", void 0);
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Number)
], StateModel.prototype, "fail", void 0);
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Number)
], StateModel.prototype, "pass", void 0);
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Number)
], StateModel.prototype, "credit", void 0);
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Number)
], StateModel.prototype, "distinction", void 0);
tslib_1.__decorate([
    mobx_1.observable,
    tslib_1.__metadata("design:type", Number)
], StateModel.prototype, "hd", void 0);
exports.state = new StateModel();
//# sourceMappingURL=state.js.map
});
___scope___.file("client/config/context.js", function(exports, require, module, __filename, __dirname){

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.context = {};
//# sourceMappingURL=context.js.map
});
___scope___.file("client/modules/main/components/app.jsx", function(exports, require, module, __filename, __dirname){

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const semantic_ui_react_1 = require("semantic-ui-react");
const mobx_react_1 = require("mobx-react");
const upload_1 = require("./upload");
function download(filename, text) {
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
}
function prepareDownload(state) {
    let result = 'Last Name,First Name,Username,Student ID,FILL THIS\n';
    result += state.savedResults.results.map(s => `${s.lastName.trim()},${s.firstName.trim()},${s.id},${s.id},${s.score}`).join('\n');
    download('result.csv', result);
}
exports.App = mobx_react_1.inject('context', 'state')(mobx_react_1.observer(({ context, state }) => {
    return (React.createElement("div", { style: { padding: '12px' } },
        React.createElement(semantic_ui_react_1.Segment, { className: "ui form" },
            React.createElement(upload_1.Upload, { label: "Saved Results", state: state.savedResults }),
            React.createElement(semantic_ui_react_1.Button, { onClick: () => prepareDownload(state), content: "Download Results", icon: "download" })),
        React.createElement(semantic_ui_react_1.Header, { content: "Results", attached: "top" }),
        React.createElement(semantic_ui_react_1.Segment, { attached: "bottom" },
            !state.savedResults.results.length && React.createElement("div", null, "No results loaded"),
            state.savedResults.results.length > 0 && (React.createElement(semantic_ui_react_1.Table, { striped: true },
                React.createElement(semantic_ui_react_1.Table.Header, null,
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Name"),
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "ID"),
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Score"),
                    state.savedResults.correctAnswers.map((a, index) => (React.createElement(semantic_ui_react_1.Table.HeaderCell, { key: index }, index + 1)))),
                React.createElement(semantic_ui_react_1.Table.Body, null, state.savedResults.results.map((s, j) => (React.createElement(semantic_ui_react_1.Table.Row, { key: j },
                    React.createElement(semantic_ui_react_1.Table.Cell, null,
                        s.lastName,
                        " ",
                        s.firstName),
                    React.createElement(semantic_ui_react_1.Table.Cell, null, s.id),
                    React.createElement(semantic_ui_react_1.Table.Cell, null, s.score),
                    s.answers.map((a, i) => (React.createElement(semantic_ui_react_1.Table.Cell, { key: j + '-' + i, style: { background: s.scores[i] === 0 ? 'red' : s.scores[i] === 1 ? 'green' : 'yellow' } },
                        React.createElement("span", null, a),
                        React.createElement("span", null, s.scores[i] > 0 && s.scores[i] < 1 ? ` (${s.scores[i]})` : ''))))))))))),
        React.createElement(semantic_ui_react_1.Header, { content: "Statistics", attached: "top" }),
        React.createElement(semantic_ui_react_1.Segment, { attached: "bottom" },
            React.createElement(semantic_ui_react_1.Table, { striped: true },
                React.createElement(semantic_ui_react_1.Table.Header, null,
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Fail"),
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Pass"),
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Credit"),
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Distinction"),
                    React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "HD")),
                React.createElement(semantic_ui_react_1.Table.Body, null,
                    React.createElement(semantic_ui_react_1.Table.Row, null,
                        React.createElement(semantic_ui_react_1.Table.Cell, null,
                            state.fail,
                            "%"),
                        React.createElement(semantic_ui_react_1.Table.Cell, null,
                            state.pass,
                            "%"),
                        React.createElement(semantic_ui_react_1.Table.Cell, null,
                            state.credit,
                            "%"),
                        React.createElement(semantic_ui_react_1.Table.Cell, null,
                            state.distinction,
                            "%"),
                        React.createElement(semantic_ui_react_1.Table.Cell, null,
                            state.hd,
                            "%")))))));
}));
//# sourceMappingURL=app.js.map
});
___scope___.file("client/modules/main/components/upload.jsx", function(exports, require, module, __filename, __dirname){

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const semantic_ui_react_1 = require("semantic-ui-react");
const mobx_react_1 = require("mobx-react");
exports.Upload = mobx_react_1.observer(({ label, state }) => (React.createElement(semantic_ui_react_1.Form.Field, null,
    React.createElement("label", null,
        label,
        " (",
        state.name,
        ")"),
    React.createElement("div", { className: "ui action input" },
        React.createElement(semantic_ui_react_1.Input, { icon: "attach", type: "file", onChange: e => {
                const file = e.currentTarget.files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.readAsText(file, 'UTF-8');
                    reader.onload = function (evt) {
                        state.name = file.name;
                        state.load(file.name, evt.target.result);
                    };
                }
            } })))));
//# sourceMappingURL=upload.js.map
});
return ___scope___.entry = "index.tsx";
});
FuseBox.pkg("crypto", {}, function(___scope___){
___scope___.file("index.js", function(exports, require, module, __filename, __dirname){

module.exports = { randomBytes: function(length) { return crypto.getRandomValues(new global.Uint8Array(length)) }}
});
return ___scope___.entry = "index.js";
});
FuseBox.target = "browser"

FuseBox.import("default/index.jsx");
FuseBox.main("default/index.jsx");
})
(FuseBox)